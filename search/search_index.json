{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>The Margo initiative is an open collaboration between like-minded organizations and individuals, sharing a common vision: deliver edge interoperability for industrial automation ecosystems. Margo is hosted by the Linux Foundation.</p> <p>Our mission? Define the mechanisms for interoperability between edge applications, edge devices, and edge orchestration software in ecosystems of industrial users, helping them to mitigate scale challenges in digitalizing their operations. Margo strives to help industrial users to increase the adoption of repeatable software patterns, supporting their heterogenous ecosystems of many suppliers.</p> <p>Find out more about the Margo initiative and how to become engaged at margo.org.</p> <p>Disclaimer</p> <p>This is a commit snapshot rendering of the of work-in-progress Margo System Specification draft from the repository margo/specification, commit <code>d35067419af831bcd00c69a4d8f0563f522f2daa</code>.</p> <p>Do not attempt to implement this version of the Specification or reference this version as authoritative in any way!</p>"},{"location":"#license","title":"License","text":"<p>Copyright \u00a9 2024 Margo</p> <p>See License.</p>"},{"location":"app-interoperability/application-package-definition/","title":"Application Package Definition","text":"<p>This section addresses how an application is packaged by the \u201cApplication Developer\u201d who has implemented the application and aims to provide it to Margo-conformant systems. An application aggregates one or more OCI Containers. The application package is made available in an application registry.  </p> <p>The application package comprises:</p> <ul> <li>The application description file <code>margo.yaml</code>, which contains information about the application's marketing details (e.g., description, icon, release notes, license file, etc.), resource requirements, required input parameters, and application's supported deployment configurations (e.g,  Helm charts, docker-compose package).</li> <li> <p>The application resources which can be used to display additional information about the application in an application catalog or marketplace based on the application's defined metadata (e.g., description, icon, release notes, license file, etc.).</p> <p>Note Application Marketplaces are out of scope for Margo. The exact requirements of the Marketing Material shall be defined by the Application Marketplace beyond outlined mandatory content.</p> </li> </ul> <p>The application package's deployment configuration SHALL be defined as Helm Charts AND/OR a Docker Compose packages.</p> <ul> <li>To target devices running Kubernetes applications must be packaged as helm charts using Helm V3.</li> <li>To target devices deploying applications using Docker Compose files you must create a tarball file containing the application's docker-compose.yml file and any additional artifacts referenced by the docker compose file (e.g., configuration files, environment variable files, etc.). It is highly recommend to digitally sign this package. When digitally signing the package PGP MUST be used.</li> </ul> <p>Investigation Needed: We plan to do a security review of this package definition later. During this review we will revisit the way the docker compose tarball file should be signed. We will also discuss how we should handle secure container registries that require a username and password.</p> <p>Investigation Needed: We need to determine what impact, if any, using 3rd party helm charts has on being Margo compliant.</p> <p>Investigation Needed: Missing in the current specification are ways to define the compatibility information (resources required to run, application dependencies) as well as required infrastructure  services  such as storage, message queues/bus, reverse proxy, or authentication/authorization/accounting.</p> <p>If either one cannot be implemented it MAY be omitted but Margo RECOMMENDS defining components for both Helm Chart AND Docker Compose packages to strengthen interoperability and applicability.</p> <p>Note A device running the application will only install the application using either Docker Compose files or Helm Charts but not both.</p>"},{"location":"app-interoperability/application-package-definition/#application-package-structure","title":"Application Package Structure","text":"<p>The application package has the following folder structure:</p> <pre><code>/                            # REQUIRED top-level directory \n\u2514\u2500\u2500 margo.yaml               # REQUIRED application description file in YAML Format \n\u2514\u2500\u2500 resources                # OPTIONAL folder with application catalog resources e.g., icon, license file, release notes \n</code></pre>"},{"location":"app-interoperability/application-package-definition/#application-description","title":"Application Description","text":"<p>The <code>margo.yaml</code> file is the application description. The purpose of this file is to present the application on an application catalog or marketplace from where an end user selects the application to hand it over to the Workload Orchestration Software, which configures it and makes it available for installation on the edge device (see Section Workload Management Interface).</p>"},{"location":"app-interoperability/application-package-definition/#application-description-example","title":"Application Description Example","text":"<p>A simple hello-world example of an <code>margo.yaml</code> file is shown below:</p> <pre><code>apiVersion: margo.org/v1-alpha1\nkind: application\nmetadata:\n  id: com-northstartida-hello-world\n  name: Hello World\n  description: A basic hello world application\n  version: 1.0\n  catalog:\n    application:\n      icon: ./resources/hw-logo.png\n      tagline: Northstar Industrial Application's hello world application.\n      descriptionFile: ./resources/description.md\n      releaseNotes: ./resources/release-notes.md\n      licenseFile: ./resources/license.pdf\n      site: http://www.northstar-ida.com\n      tags: [\"monitoring\"]\n    author:\n      - name: Roger Wilkershank\n        email: rpwilkershank@northstar-ida.com\n    organization:\n      - name: Northstar Industrial Applications\n        site: http://northstar-ida.com\ndeploymentProfiles:\n  - type: helm.v3\n    components:\n      - name: hello-world\n        properties:  \n          repository: oci://northstarida.azurecr.io/charts/hello-world\n          revision: 1.0.1\n          wait: true\nparameters:\n  greeting:\n    value: Hello\n    targets:\n    - pointer: global.config.appGreeting\n      components: [\"hello-world\"]\n  greetingAddressee:\n    value: World\n    targets:\n    - pointer: global.config.appGreetingAddressee\n      components: [\"hello-world\"]\nconfiguration:\n  sections:\n    - name: General Settings\n      settings:\n        - parameter: greeting\n          name: Greeting\n          description: The greeting to use.\n          schema: requireText\n        - parameter: greetingAddressee\n          name: Greeting Addressee\n          description: The person, or group, the greeting addresses.\n          schema: requireText\n  schema:\n    - name: requireText\n      dataType: string\n      maxLength: 45\n      allowEmpty: false\n</code></pre> <p>An example of a <code>margo.yaml</code> file using multiple helm charts and a docker-compose file package is shown below.</p> <pre><code>apiVersion: margo.org/v1-alpha1\nkind: application\nmetadata:\n  id: com-northstartida-digitron-orchestrator\n  name: Digitron orchestrator\n  description: The Digitron orchestrator application\n  version: 1.2.1 \n  catalog:\n    application:\n      icon: ./resources/ndo-logo.png\n      tagline: Northstar Industrial Application's next-gen, AI driven, Digitron instrument orchestrator.\n      descriptionFile: ./resources/description.md\n      releaseNotes: ./resources/release-notes.md\n      licenseFile: ./resources/license.pdf\n      site: http://www.northstar-ida.com\n      tags: [\"optimization\", \"instrumentation\"]\n    author:\n      - name: Roger Wilkershank\n        email: rpwilkershank@northstar-ida.com\n    organization:\n      - name: Northstar Industrial Applications\n        site: http://northstar-ida.com\ndeploymentProfiles:\n  - type: helm.v3\n    components:\n      - name: database-services\n        properties: \n          repository: oci://quay.io/charts/realtime-database-services\n          revision: 2.3.7\n          wait: true\n          timeout: 8m30s\n      - name: digitron-orchestrator\n        properties:\n          repository: oci://northstarida.azurecr.io/charts/northstarida-digitron-orchestrator\n          revision: 1.0.9\n          wait: true\n  - type: docker-compose\n    components:\n      - name: digitron-orchestrator-docker\n        properties:\n          packageLocation: https://northsitarida.com/digitron/docker/digitron-orchestrator.tar.gz\n          keyLocation: https://northsitarida.com/digitron/docker/public-key.asc\nparameters:\n  idpName:\n    targets:\n      - pointer: idp.name\n        components: [\"digitron-orchestrator\"]\n      - pointer: ENV.IDP_NAME\n        components: [\"digitron-orchestrator-docker\"]\n  idpProvider:\n    targets:\n      - pointer: idp.provider\n        components: [\"digitron-orchestrator\"]\n      - pointer: ENV.IDP_PROVIDER\n        components: [\"digitron-orchestrator-docker\"]\n  idpClientId:\n    targets:\n      - pointer: idp.clientId\n        components: [\"digitron-orchestrator\"]\n      - pointer: ENV.IDP_CLIENT_ID\n        components: [\"digitron-orchestrator-docker\"]\n  idpUrl:\n    targets:\n      - pointer: idp.providerUrl\n        components: [\"digitron-orchestrator\"]\n      - pointer: idp.providerMetadata\n        components: [\"digitron-orchestrator\"]\n      - pointer: ENV.IDP_URL\n        components: [\"digitron-orchestrator-docker\"]\n  adminName:\n    targets:\n      - pointer: administrator.name\n        components: [\"digitron-orchestrator\"]\n      - pointer: ENV.ADMIN_NAME\n        components: [\"digitron-orchestrator-docker\"]\n  adminPrincipalName:\n    targets:\n      - pointer: administrator.userPrincipalName\n        components: [\"digitron-orchestrator\"]\n      - pointer: ENV.ADMIN_PRINCIPALNAME\n        components: [\"digitron-orchestrator-docker\"]\n  pollFrequency:\n    value: 30\n    targets: \n      - pointer: settings.pollFrequency\n        components: [\"digitron-orchestrator\", \"database-services\"]\n      - pointer: ENV.POLL_FREQUENCY\n        components: [\"digitron-orchestrator-docker\"]\n  siteId:\n    targets:\n      - pointer: settings.siteId\n        components: [\"digitron-orchestrator\", \"database-services\"]\n      - pointer: ENV.SITE_ID\n        components: [\"digitron-orchestrator-docker\"]\n  cpuLimit:\n    value: 1 \n    targets:\n      - pointer: settings.limits.cpu\n        components: [\"digitron-orchestrator\"]\n  memoryLimit:\n    value: 16384\n    targets:\n      - pointer: settings.limits.memory\n        components: [\"digitron-orchestrator\"]\nconfiguration:\n  sections:\n    - name: General\n      settings:\n        - parameter: pollFrequency\n          name: Poll Frequency\n          description: How often the service polls for updated data in seconds\n          schema: pollRange\n        - parameter: siteId\n          name: Site Id\n          description: Special identifier for the site (optional)\n          schema: optionalText\n    - name: Identity Provider\n      settings:\n        - parameter: idpName\n          name: Name\n          description: The name of the Identity Provider to use\n          immutable: true\n          schema: requiredText\n        - parameter: idpProvider\n          name: Provider\n          description: Provider something something\n          immutable: true\n          schema: requiredText\n        - parameter: idpClientId\n          name: Client ID\n          description: The client id\n          immutable: true\n          schema: requiredText\n        - parameter: idpUrl\n          name: Provider URL\n          description: The url of the Identity Provider\n          immutable: true\n          schema: url\n    - name: Administrator\n      settings:\n        - parameter: adminName\n          name: Presentation Name\n          description: The presentation name of the administrator\n          schema: requiredText\n        - parameter: adminPrincipalName\n          name: Principal Name\n          description: The principal name of the administrator\n          schema: email\n    - name: Resource Limits\n      settings:\n        - parameter: cpuLimit\n          name: CPU Limit\n          description: Maximum number of CPU cores to allow the application to consume\n          schema: cpuRange\n        - parameter: memoryLimit\n          name: Memory Limit\n          description: Maximum number of memory to allow the application to consume\n          schema: memoryRange\n  schema:\n    - name: requiredText\n      dataType: string\n      maxLength: 45\n      allowEmpty: false\n    - name: email\n      dataType: string\n      allowEmpty: false\n      regexMatch: .*@[a-z0-9.-]*\n    - name: url\n      dataType: string\n      allowEmpty: false\n      regexMatch: ^(http(s):\\/\\/.)[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&amp;//=]*)$\n    - name: pollRange\n      dataType: integer\n      minValue: 30\n      maxValue: 360\n      allowEmpty: false\n    - name: optionalText\n      dataType: string  \n      minLength: 5\n      allowEmpty: true\n    - name: cpuRange\n      dataType: double\n      minValue: 0.5\n      maxPrecision: 1\n      allowEmpty: false\n    - name: memoryRange\n      dataType: integer\n      minValue: 16384\n      allowEmpty: false\n</code></pre>"},{"location":"app-interoperability/application-package-definition/#top-level-attributes","title":"Top-level Attributes","text":"Attribute Type Required? Description apiVersion string Y Identifier of the version of the API the object definition follows. kind string Y Must be <code>application</code>. metadata Metadata Y Metadata element specifying marketing characteristics about the application. See the Metadata section below. deploymentProfiles Deployment Y Deployment profiles element specifying the types of deployments the application supports. See the Deployment section below. parameters map[string][Parameter] N Parameters element specifying the configurable parameters to use when installing, or updating, the application. See the Parameter section below. configuration Configuration N Configuration element specifying how parameters should be displayed to the user for setting the value as well as the rules to use to validate the user's input. See the Configuration section below."},{"location":"app-interoperability/application-package-definition/#metadata-attributes","title":"Metadata Attributes","text":"Attribute Type Required? Description id string Y An identifier for the application. The id is used to help create unique identifiers where required, such as namespaces. The id must be lower case letters and numbers and MAY contain dashes. Uppercase letters, underscores and periods MUST NOT be used. The id MUST NOT be more than 200 characters. name string Y The application's official name. This name is for display purposes only and can container whitespace and special characters. version string Y The application's version. catalog Catalog Y Catalog element specifying the application catalog details used to display the application in an application catalog or marketplace. See the Catalog section below."},{"location":"app-interoperability/application-package-definition/#catalog-attributes","title":"Catalog Attributes","text":"Attribute Type Required? Description application Application N Application element specifying the application specific metadata. See the Application Metadata section below. author []Author N Author element specifying metadata about the application's author. See the Author Metadata section below. organization []Organization Y Organization element specifying metadata about the organization/company providing the application. See the Organization Metadata section below."},{"location":"app-interoperability/application-package-definition/#application-metadata-attributes","title":"Application Metadata Attributes","text":"Attribute Type Required? Description descriptionFile string N Link to the file containing the application's full description. The file should be a markdown file. icon string N Link to the icon file (e.g., in PNG format). licenseFile string N Link to the file that details the application's license. The file should either be a plain text, markdown or PDF file. releaseNotes string N Statement about the changes for this application's release. The file should either be a markdown or PDF file. site string N Link to the application's website. tagline string N The application's slogan. tags []string N An array of strings that can be used to provide additional context for the application in a user interface to assist with task such as categorizing, searching, etc."},{"location":"app-interoperability/application-package-definition/#author-metadata-attributes","title":"Author Metadata Attributes","text":"Attribute Type Required? Description name string N The name of the application's creator. email string N Email address of the application's creator."},{"location":"app-interoperability/application-package-definition/#organization-metadata-attributes","title":"Organization Metadata Attributes","text":"Attribute Type Required? Description name string Y Organization responsible for the application's development and distribution. site string N Link to the organization's website."},{"location":"app-interoperability/application-package-definition/#deployment-profiles-attributes","title":"Deployment Profiles Attributes","text":"Attribute Type Required? Description type string Y Indicates the components's deployment configuration. The values are <code>helm.v3</code> to indicate the component's package format is Helm version 3 and <code>docker-compose</code> to indicate the component's package format is Docker Compose. When installing the application on a device supporting the Kubernetes platform all <code>helm.v3</code> components, and only <code>helm.v3</code> components, will be provided to the device in same order they are listed in the application description file. When installing the application on a device supporting docker-compose all <code>docker-compose</code> components, and only <code>docker-compose</code> components, will be provided to the device in the same order they are listed in the application description file. The device will install the components in the same order they are listed in the application description file. components []Component N Component element indicating the components to deploy when installing the application. See the Component section below."},{"location":"app-interoperability/application-package-definition/#component-attributes","title":"Component Attributes","text":"Attribute Type Required? Description name string Y A unique name used to identify the component package. For helm installations the name will be used as the chart name. The name must be lower case letters and numbers and MAY contain dashes. Uppercase letters, underscores and periods MUST NOT be used. properties map[string][interface{}] Y A dictionary element specifying the component packages's deployment details. See the Component Properties section below."},{"location":"app-interoperability/application-package-definition/#component-properties","title":"Component Properties","text":"<p>The expected properties for the suppported deployment types are indicated below.</p> <ul> <li> <p>Properties for <code>helm.v3</code> components</p> Attribute Type Required? Description repository string Y The URL indicating the helm chart's location. revision string Y The helm chart's full version. wait bool N If <code>True</code>, indicates the device MUST wait until the helm chart has finished installing before installing the next helm chart. The default is <code>True</code>. The Workload Orchestration Agent MUST support <code>True</code> and MAY support <code>False</code>. Only applies if multiple <code>helm.v3</code> components are provided. timeout string N The time to wait for the component's installation to complete. If the installation does not completed before the timeout occurs the installation process fails. The format is \"##m##s\" indicating the total number of minutes and seconds to wait. </li> <li> <p>Properties for <code>docker-compose</code> components</p> <p>Investigation Needed: We need to have more discussion about how docker-compose should be handled and what is required here. We also need to determine if there is a version of docker-compose that needs to be specified. The docker compose schema version has been deprecated so it's not clear what we would even use for this if we wanted to.</p> Attribute Type Required? Description packageLocation string Y The URL indicating the Docker Compose package's location. keyLocation string N The public key used to validated the digitally signed package. It is highly recommend to digitally sign the package. When signing the package PGP MUST be used. wait bool N If <code>True</code>, indicates the device MUST wait until the Docker Compose file has finished starting up before starting the next Docker Compose file. The default is <code>True</code>. The Workload Orchestration Agent MUST support <code>True</code> and MAY support <code>False</code>. Only applies if multiple <code>docker-compose</code> components are provided. timeout string N The time to wait for the component's installation to complete. If the installation does not completed before the timeout occurs the installation process fails. The format is \"##m##s\" indicating the total number of minutes and seconds to wait. </li> </ul>"},{"location":"app-interoperability/application-package-definition/#defining-configurable-application-parameters","title":"Defining configurable application parameters","text":"<p>To allow customizable configuration values when installing an application, the <code>margo.yaml</code> defines the parameters and configuration sections giving the application vendor control over what can be configured when installing, or updating, an application. The configuration section describes how the workload orchestration software vendor must display parameters to the user to allow them to specify the values. The schema section describes how the workload orchestration software vendor must validate the values provided by the user before the application is installed or updated.</p> <p>Note: At this point the specification only deals with parameter values provided by the user as part of installing, or updating, the application. We anticipate parameter values to come from other sources, such as the device, in the future and not only from the user.</p>"},{"location":"app-interoperability/application-package-definition/#parameter-attributes","title":"Parameter Attributes","text":"Attribute Type Required? Description value &lt;see description&gt; N The parameter\u2019s default value. Accepted data types are string, integer, double, boolean, array[string], array[integer], array[double], array[boolean]. targets []Target Y Used to indicate which component the value should be applied to when installing, or updating, the application. See the Target section below."},{"location":"app-interoperability/application-package-definition/#target-attributes","title":"Target Attributes","text":"Attribute Type Required? Description pointer string Y The name of the parameter in the deployment configuration. For Helm deployments, this is the dot notation for the matching element in the <code>values.yaml</code> file. This follows the same naming convention you would use with the <code>--set</code> command line argument with the <code>helm install</code> command. For docker-compose deployments, this is the name of the environment variable to set. components []string Y Indicates which deployment profile component the parameter target applies to. The component name specified here MUST match a component name in the deployment profiles section."},{"location":"app-interoperability/application-package-definition/#configuration-attributes","title":"Configuration Attributes","text":"Attribute Type Required? Description sections []Section Y Sections are used to group related parameters together, so it is possible to present a user interface with a logical grouping of the parameters in each section. See the Section section below. schema []Schema Y Schema is used to provide details about how to validate each parameter value. At a minimum, the parameter value must be validated to match the schema\u2019s data type. The schema indicates additional rules the provided value must satisfy to be considered valid input. See the Schema section below."},{"location":"app-interoperability/application-package-definition/#section-attributes","title":"Section Attributes","text":"Attribute Type Required? Description name string Y The name of the section. This may be used in the user interface to show the grouping of the associated parameters within the section. settings []Setting Y Settings are used to provide instructions to the workload orchestration software vendor for displaying parameters to the user. A user MUST be able to provide values for all settings. See the Setting section below."},{"location":"app-interoperability/application-package-definition/#setting-attributes","title":"Setting Attributes","text":"Attribute Type Required? Description parameter string Y The name of the parameter the setting is associated with. name string Y The parameter's display name to show in the user interface. description string N The parameters's short description to provide additional context to the user in the user interface about what the parameter is for. immutable boolean N If true, indicates the parameter value MUST not be changed once it has been set and used to install the application. Default is false if not provided. schema string Y The name of the schema definition to use to validate the parameter's value. See the Schema section below."},{"location":"app-interoperability/application-package-definition/#schema-attributes","title":"Schema Attributes","text":"Attribute Type Required? Description name string Y The name of the schema rule. This used in the setting to link the setting to the schema rule. datatype string Y Indicates the expected data type for the user provided value. Accepted values are string, integer, double, boolean, array[string], array[integer], array[double], array[boolean]. At a minimum, the provided parameter value MUST match the schema\u2019s data type if no other validation rules are provided. &lt;<code>validation rule options</code>&gt; &lt;see below&gt; N Defines the validation rules to use to validate the user provided parameter value. The rules are based on the schema's data type and are listed below. The value MUST be validated against any validation rules defined in the schema."},{"location":"app-interoperability/application-package-definition/#validation-rules","title":"Validation Rules","text":"<p>Each data type has its own set of validation rules that can be used.</p> <ul> <li> <p>Text Validation Rules</p> Attribute Type Required? Description allowEmpty bool N If true, indicates a value must be provided. Default is false if not provided. minLength integer N If set, indicates the minimum number of characters the value must have to be considered valid. maxLength integer N If set, indicates the maximum number of characters the value must have to be considered valid. regexMatch string N If set, indicates a regular expression to use to validate the value. </li> <li> <p>Boolean Validation Rules</p> Attribute Type Required? Description allowEmpty bool N If true, indicates a value must be provided. Default is false if not provided. </li> <li> <p>Numeric Integer Validation Rules</p> Attribute Type Required? Description allowEmpty bool N If true, indicates a value must be provided. Default is false if not provided. minValue integer N If set, indicates the minimum allowed integer value the value must have to be considered valid. maxValue integer N If set, indicates the maximum allowed integer value the value must have to be considered valid. </li> <li> <p>Numeric Double Validation Rules</p> Attribute Type Required? Description allowEmpty bool N If true, indicates a value must be provided. Default is false if not provided. minValue double N If set, indicates the minimum allowed double value the value must have to be considered valid. maxValue double N If set, indicates the maximum allowed double value the value must have to be considered valid. minPrecision integer N If set, indicates the minimum level of precision the value must have to be considered valid. maxPrecision integer N If set, indicates the maximum level of precision the value must have to be considered valid. </li> <li> <p>Select Validation Rules</p> Attribute Type Required? Description allowEmpty bool N If true, indicates a value must be provided. Default is false if not provided. multiselect bool N If true, indicates multiple values can be selected. If multiple values can be selected the resulting value is an array     of the     selected values. The default is false if not provided. options array Y This provides the list of acceptable options the user can select from. The data type for each option must match the     parameter     setting\u2019s data type. </li> </ul>"},{"location":"app-interoperability/local-registries/","title":"Local Registries","text":"<p>This section investigates options for configuring the usage of local Docker (or Helm Chart) registries. The goal of configuring such local registries is to avoid the reliance on public, Internet-accessible registries. The reasons for not using such public registries are mainly twofold: (1) publicly hosted Docker images or Helm charts could become unavailable at some point, as the owner decides to take the Docker images or Helm charts off the public registry, (2) Internet connectivity may not be available to the device and hence public registries are not reachable, or (3) end-users want to host their own registries so they can do security scans and validate the packages.</p> <p>In terms of connectivity, we can thereby distinguish mainly between the following device categories:</p> <ol> <li>Fully connected device, which means a device is deployed in the field (e.g., a factory shop floor) and has access to the Internet.</li> <li>Locally connected device, i.e., the device has connectivity to a local network (e.g., factory- or enterprise-wide) and a local repository can be made reachable.</li> <li>Air-gapped device, i.e., the device generally is not connected and must be configured by accessing it directly (via USB, Bluetooth, or a direct network link, e.g., via Ethernet cable, or similar) for example via a technician\u2019s laptop.</li> </ol> <p>Local registries for Docker images and Helm Charts can be used for all 3 categories of devices. In case of fully connected devices, although the device could reach the Internet, a local registry can still be useful, e.g., as a cache for remote registries to save on bandwidth or to have Docker images and Helm Carts reliably available. In case of locally connected devices, a local registry is required to enable the WOA to install margo applications on the device, as the device/WOA does not have Internet access. Thereby, the local registry can be setup as a pull-through cache where data (e.g., Docker images) are cached locally when they are first retrieved from a remote source and subsequent requests for the same data are served from the local cache rather than fetching it again from the remote source. In case of air-gapped devices, a local registry has to be accessible on the technician's laptop (or other directly connected device), which performs the application installation process.</p> <p>To setup local registries, different configuration options exist:</p>"},{"location":"app-interoperability/local-registries/#option-docker-registry-mirror-on-kubernetes-level","title":"Option - Docker Registry Mirror on Kubernetes Level","text":"<p>Kubernetes supports the configuration of registry mirrors. How this is configured depends on the distribution and the underlying container runtime. Distributions that utilize containerd as runtime (e.g., k3s or microk8s) allow the definition of mirrors in a configuration file. For example, in k3s the file <code>/etc/rancher/k3s/registries.yaml</code> can be used to set up a mirror for each device's Kubernetes environment:</p> <pre><code>mirrors:\n  \"docker.io\":\n    endpoint:\n      - \"http://&lt;local-registry-ip&gt;:5000\"\nconfigs:\n  \"docker.io\":\n    auth:\n      username: \"&lt;username&gt;\"\n      password: \"&lt;password&gt;\"\n</code></pre>"},{"location":"app-interoperability/local-registries/#option-docker-registry-as-pull-through-cache-on-docker-level","title":"Option - Docker Registry as Pull-through Cache on Docker Level","text":"<p>To configure a pull-through cache in Docker for the container registry, a Docker Registry can be setup that acts as caching proxy for a remote Docker registry. Such a Docker Registry container can be defined using the following <code>config.yml</code>:</p> <pre><code>version: 0.1\nlog:\n  fields:\n    service: registry\nstorage:\n  filesystem:\n    rootdirectory: /var/lib/registry\nhttp:\n  addr: :5000\n  headers:\n    X-Content-Type-Options: [nosniff]\nhealth:\n  storagedriver:\n    enabled: true\n    interval: 10s\n    threshold: 3\nproxy:\n  remoteurl: https://registry-1.docker.io\n</code></pre> <p>This registry can be started uing the following command: <code>docker run -d -p 5000:5000 --restart unless-stopped --name registry -v $(pwd)/config.yml:/etc/docker/registry/config.yml registry:2</code></p> <p>Then, the Docker daemon needs to be configured to use the private registry as a mirror in the <code>/etc/docker/daemon.json</code> file:</p> <pre><code>{\n  \"registry-mirrors\": [\"http://10.100.2.102:5000\"],\n  \"insecure-registries\": [\"10.100.2.102:5000\"]\n}\n</code></pre>"},{"location":"app-interoperability/local-registries/#option-helm-chart-registry-as-pull-through-cache","title":"Option - Helm Chart Registry as Pull-through Cache","text":"<p>Setting up a pull-through cache for Helm charts in combination with Kubernetes involves configuring a local Helm chart repository, e.g., ChartMuseum that can be installed with the <code>PROXY_CACHE</code> variable set to <code>true</code>:</p> <pre><code>helm repo add chartmuseum https://chartmuseum.github.io/charts\nhelm repo update\nhelm install my-chartmuseum chartmuseum/chartmuseum --set env.open.DISABLE_API=false --set env.open.PROXY_CACHE=true\n</code></pre> <p>Then, this Helm Chart repository can be added to Helm and chart releases can be installed there:</p> <pre><code>helm repo add my-cached-repo http://&lt;chartmuseum-ip&gt;:8080\nhelm repo update\nhelm install my-release my-cached-repo/&lt;chart-name&gt;\n\n</code></pre> <p>Now, when deploying applications in Kubernetes using Helm, the cached repository is used to serve charts rather than the remote repository.</p>"},{"location":"app-interoperability/observability/","title":"Application Observability","text":"<p>Observability involves the collection and analysis of information produced by a system to monitor its internal behavior.</p> <p>Observability data is captured using the following signals:</p> <ul> <li>Metrics - a numerical measurement in time used to observe change over a period of time or configured limits. For example, memory consumption, CPU Usage, available disk space.</li> <li>Logs - text outputs produced by a running system/application to provide information about what is happening. For example, outputs to capture security events such as failed login attempts, or unexpected conditions such as errors.  </li> <li>Traces - contextual data used to follow a request's entire path through a distributed system. For example, trace data can be used to identify bottlenecks, or failure points, within a distributed system.</li> </ul> <p>Margo's application observability scope is limited to the following areas:</p> <ul> <li>The device's container platform</li> <li>The device's workload orchestration agent</li> <li>The compliant workloads deployed to the device.</li> </ul> <p>The application observability data is intended to be used for purposes such as:</p> <ul> <li>Monitoring the container platform's health and current state. This includes aspects such as memory, CPU, and disk usage as well as cluster, node, pod, and container availability, run state, and configured resource limits. This enables end users to make decisions such as whether or not a device can support more applications, or has too many deployed.</li> <li>Monitoring the workload orchestration agent and containerized application's state to ensure it is running correctly, performing as expected and not consuming more resource than expected.</li> <li>To assist with debugging/diagnostics for applications encountering unexpected conditions impacting their ability to run as expected.</li> </ul> <p>Margo's application observability is NOT intended to be used to monitor anything outside the device such as production processes, machinery, controllers, or sensors and should NOT be used for this purpose.</p>"},{"location":"app-interoperability/observability/#observability-framework","title":"Observability Framework","text":"<p>Application observability data is made available using OpenTelemetry. OpenTelemetry, a popular open source specification, defines a common way for observability data to be generated and consumed.</p> <p>There are several reasons why OpenTelemetry was chosen:</p> <ul> <li>OpenTelemetry is based on a open source specification and not only an implementation</li> <li>OpenTelemetry is widely adopted</li> <li>OpenTelemetry has a large, and active, open source community</li> <li>OpenTelemetry provides SDKs for many popular languages if people wish to use them</li> <li>The OpenTelemetry community project has reusable components such as telemetry receivers for Kubernetes, Docker and the host system making integration easier.</li> <li>OpenTelemetry is vendor agnostic.</li> </ul> <p>Decision Needed: Need to determine which version(s) of the specification are supported</p>"},{"location":"app-interoperability/observability/#open-telemetry-collector-deployment-methods","title":"Open Telemetry Collector Deployment Methods","text":"<p>The device owner MUST deploy, and configure, an OpenTelemetry collector on their device. The device owner MAY choose the deployment model they wish to follow but MUST use one of the following approaches.</p> <p>For standalone and clustered devices there MUST be at least one OpenTelemetry collector deployed to collect the observability data required below. The Device owner MAY choose to deploy multiple OpenTelemetry collectors with each collector receiving different parts of the observability data required below as long as all required observability data is collected.</p> <p></p> <p>For multi-node capable clusters the device owner MAY chose to use the DaemonSet deployment model to ensure there is an OpenTelemetry collector running on each node.</p> <p></p> <p>For multi-node capable clusters the device owner MUST ensure the communication between applications, and collector, from one node to a collector on a different node is secure.</p> <p>The device owner MUST NOT require the use the sidecar deployment model at this time since this requires the pods/containers to have foreknowledge of this deployment model.</p> <p>Action: Some more research needs to be done here. If there is a way to do this dynamically without requiring the application developer to include special attributes on their pods then it may be allowed.</p> <p>The device owner MUST NOT pre-configure exporters to send observability data from the device because the end user must control what observability data is exported.</p> <p>The device owner MUST NOT attempt to inject auto-instrumentation (by using the OpenTelemetry operator for example) into any compliant applications running on the device that are not owned by the device owner.</p>"},{"location":"app-interoperability/observability/#container-platform-observability-requirements","title":"Container Platform Observability Requirements","text":"<p>In order to allow for monitoring the chosen container platform's state the device owner MUST ensure the following observability data is being collected and made available for export from the OpenTelemetry collector(s) on the standalone device or cluster</p>"},{"location":"app-interoperability/observability/#kubernetes","title":"Kubernetes","text":"<p>For devices running Kubernetes the following is a minimum list of observability data that MUST be provided. The device owner MAY choose to provide additional observability data if they wish.</p> <ul> <li>Cluster (both single or multiple node) observability data MUST be collected.</li> <li>It is recommended the Device Owner use the Kubernetes Cluster Receiver with the default configuration to collect this information but using this receiver is not required.</li> <li>If the Device Owner chooses not to use the Kubernetes Cluster Receiver they MUST provide the same output as the Kubernetes Cluster Receiver's default configuration.</li> </ul> <p>Note: Please see the information below for the default metrics emitted by the Kubernetes Cluster Receiver.</p> <ul> <li>Cluster events observability data MUST be collected.</li> <li>It is recommended the Device Owner use either the Kubernetes Objects Receiver or Kubernetes Events Receiver with the default configuration to collect this information but using either of these receivers is not required.</li> <li>If the Device Owner chooses not to use either the Kubernetes Object Receiver or Kubernetes Events Receiver they MUST provide the same output as these Kubernetes Events Receiver's default configuration.</li> </ul> <p>Action: Need to determine which namespaces should be included. All of them, or just the ones the device owner is responsible for creating.</p> <p>Action: The Kubernetes objects receiver needs to be configured to export events and other resource logs so we'll need to document something additional for this receiver.</p> <ul> <li>Node, Pod and Container observability data MUST be collected.</li> <li>It is recommended the Device Owner use the Kubelet Stats Receiver with the default configuration to collect this information but using this receiver is not required.</li> <li>If the Device Owner chooses not to use the Kubelet Stats Receiver they MUST provide the same output as the Kubelet Stats Receiver's default configuration.</li> </ul> <p>Note: Please see the information below for the default metrics emitted by the Kubelet Stats Receiver.</p> <ul> <li>Metadata identifying the observability data's source MUST be added to the received observability data.</li> <li>It is recommend the Device Owner use the Kubernetes Attributes Processor with the default configuration to enhance the observability data with this additional metadata but using this processor is not required.</li> <li>If the Device Owner chooses not to use the Kubernetes Attributes Processor they MUST provide the same metadata as the Kubernetes Attributes Processor's default configuration</li> </ul> <p>Note: Please see the information below for the default attributes added by the Kubernetes Attributes Processor.</p>"},{"location":"app-interoperability/observability/#standalone-device-container-platforms","title":"Standalone Device Container Platforms","text":"<p>For devices running non-clustered container platforms such as Docker or Podman the following is a minimum list of observability data that MUST be provided. The device owner MAY choose to provide additional observability data if they wish.</p> <ul> <li>Container observability data MUST be collected.</li> <li>It is recommended the Device Owner use the Docker Stats Receiver or Podman Stats Receiver with the default configuration to collect this information but using either of these receivers is not required.</li> <li>If the Device Owner chooses not to use either receiver they MUST provide the same output as the receiver's default configuration.</li> </ul> <p>Note: Please see the information below for the default metrics emitted by the Docker Stats and Podman Stats Receivers.</p>"},{"location":"app-interoperability/observability/#general","title":"General","text":"<ul> <li>The collector MUST receive data using the OLTP format.</li> <li>It is recommended the Device Owner use the OLTP Receiver to allow applications to send observability data to the collector.</li> <li>If the Device Owner chooses not to use the OLTP Receiver they MUST provide the same functionality as the OLTP receiver.</li> </ul> <p>Action: We will need to determine if there is additional information the device owner needs to include as attributes for each message to ensure the source can be identified. For example, we may require a device device Id attribute.</p> <ul> <li>Host observability data MUST be collected.</li> <li>It is recommended the Device Owner use the Host Metrics Receiver with the default configuration to collect this information but using this receiver is not required.</li> <li>If the Device Owner chooses not to use the Host Metrics Receiver they MUST provided the same output as the Host Metrics Receiver's default configuration.</li> </ul> <p>Note: Please see the information below for the default metrics emitted by the Host Metrics Receivers.</p>"},{"location":"app-interoperability/observability/#workload-orchestration-agent-observability-requirements","title":"Workload Orchestration Agent Observability Requirements","text":"<p>For several reasons, it is recommended the workload orchestration agent be deployed as a containerized application. If it is deployed this way, the application's resource utilization observability data is captured automatically as part of the container platform observability requirements.</p> <p>If the device owner chooses not to deploy the workload orchestration agent as a containerized application they MUST ensure the following resource usage observability data is available from the OpenTelemetry collector for their agent.</p> <p>Action: Need to do research to determine if this makes sense, or not, when the agent is not running as a containerized application. We may have to leave it up to what is covered through device observability for this case. If it is possible, and makes sense, we need to define what should be provided.</p> <p>In addition to the resource utilization data the workload orchestration agent MUST also send the following minimum set of application observability data to the open telemetry collector on the standalone device or cluster. The device owner MAY choose to provided additional observability data if they wish.</p> <p>Action: We need to understand what the WOS/a is going to be doing to determine what this is.</p>"},{"location":"app-interoperability/observability/#compliant-application-observability-requirements","title":"Compliant Application Observability Requirements","text":"<p>Compliant applications MAY choose to expose application specific observability data by sending their observability data to the Open Telemetry collector on the standalone device or cluster. While this is optional, is it highly recommended in order to support distributed diagnostics.</p> <p>Application developers choosing to expose application metrics, traces or logs for consumption with OpenTelemetry MUST send the data to the OpenTelemetry collector using OTLP.</p> <p>Application developers SHOULD NOT expect their applications to be auto-instrumented by anything outside of their control (by the OpenTelemetry operator for example).</p> <p>An application developer MAY choose an observability framework other than OpenTelemetry but it MUST be self-contained within the deployment of their application. If an alternative approach is taken, it is NOT recommended application developers publish their observability data outside the device/cluster by using any other means other than the Open Telemetry collector. If the application developer chooses to export data without using the OpenTelemetry collector they MUST NOT do this without the end user's approval.</p> <p>Action: Need to address in some form legacy applications that are not currently using open telemetry and don't want to migrate their application to use it.</p>"},{"location":"app-interoperability/observability/#connecting-to-the-opentelemetry-collector","title":"Connecting to the OpenTelemetry Collector","text":"<p>In order for an application to publish its observability data to the collector on the standalone device or cluster the device own MUST inject the following environment variables into each container.</p> Environment Variable Description GRPC_OTEL_EXPORTER_OTLP_ENDPOINT (Optional) The URL for the application to use to connect to the OpenTelemetry collector using gRPC. HTTP_OTEL_EXPORTER_OTLP_ENDPOINT (Required) The URL for the application to use to connect to the OpenTelemetry collector HTTP + protobuf OTEL_EXPORTER_OTLP_CERTIFICATE (Optional)The PATH for the client certificate (in PEM format) to use for secure connections to the OpenTelemetry Collector. The application must connect using the certificate if it is provided. OTEL_EXPORTER_OTLP_PROTOCOL (Optional) \"grpc\" if the preferred protocol is gRPC, \"http/protobuf\" if the preferred protocol is HTTP + protobuf. The default is \"http/protobuf\" if nothing is provided for this environment variable. If the preferred protocol is \"grpc\" but no gRPC endpoint is provided, or if the application client cannot connect via gRPC, the application client connects using \"http/protobuf\". <p>Action: We need to do some additional research to validate the above and see if any other data is needed for things like establishing a secure connection to the collector.</p>"},{"location":"app-interoperability/observability/#exporting-observability-data","title":"Exporting Observability Data","text":"<p>End users MUST be able to export observability data from a standalone device or cluster to collectors, or backends, onsite or in the cloud if they wish to make the information available to enable remote monitoring and diagnostics.</p> <p>Decision Needed: There is a dependency on the decisions about using OpenTelemetry instead of the management API approach. If OpenTelemetry is chosen then there would be some subset of data that MUST be exported to the workload orchestration service vendor.</p> <p>Future Decision: For MVS1 we have decided the configuration is updated manually. We know this is not ideal because it is error prone and can result in changes being made that should not be made. The current thinking is that the device orchestration agent will be responsible for updating the configuration when the WOS vendor or customer needs to add exports but this is out of scope for MVS1.</p> <p>OpenTelemetry allows using either a push or pull approach for getting data from a collector. Cloud based workload orchestration or observability platform service vendors should NOT require a pull method for collecting observability data because most end users will not allow devices to be exposed to the internet because of security concerns.</p>"},{"location":"app-interoperability/observability/#consuming-observability-data","title":"Consuming Observability Data","text":"<p>Workload orchestration or observability platform vendors MAY choose to consume observability data exported from the end user's devices to provide valuable services to the end user.</p> <p>The end user MAY choose to export observability data from Margo compliant devices to other OpenTelemetry collectors or backends within their environment that is not on the device.</p> <p>Device owners are NOT required to provide backends for consuming observability data on their devices.</p>"},{"location":"app-interoperability/observability/#application-observability-default-telemetry","title":"Application Observability Default Telemetry","text":"<p>The following telemetry data is collected by using the default configurations for the receivers indicated above. You can find more information about each piece of telemetry from the receiver's documentation.</p>"},{"location":"app-interoperability/observability/#metrics","title":"Metrics","text":"<p>The following table shows the metrics emitted by the indicated receivers when using the default configuration.</p> Metric Group Metric Target Kubernetes Cluster Receiver Kubelet Stats Receiver Docker Stats Reciever Podman Stats Reciever Host Metrics Reciever CPU Limit Container X CPU Load Average (15m, 5m, 1m) System X CPU Time Container, Kubernetes Node, Kubernetes Pod, System X X CPU Request Container X CPU Usage Kernel Mode Container X CPU Usage Per CPU Container X CPU Usage System Container X CPU Usage Total Container X X CPU Usage Use Mode Container X CPU Utilization Container, Kubernetes Node, Kubernetes Pod X X X Disk IO Container, System X X Disk IO Read Container X Disk IO Write Container X Disk IO Time System X Disk IO Time (Weighted) System X Disk Operations System X Disk Operations Pending System X Disk Operation Time System X Disk Total Read/Writes System X File System Available Container, Kubernetes Node, Kubernetes Pod X File System Capacity Container, Kubernetes Node, Kubernetes Pod X File System Inodes Kubernetes Volume, System X X File System Inodes Free Volume X File System Inodes Used Volume X File System Usage Container, Kubernetes Node, Kubernetes Pod, System X X Memory Available Container, Kubernetes Node, Kubernetes Pod X Memory File Container X Memory Limit Container X X X Memory Major Page Fault Container, Kubernetes Node, Kubernetes Pod X Memory Page Faults Container, Kubernetes Node, Kubernetes Pod X Memory Percent Container X X Memory Request Container X Memory RSS Container, Kubernetes Node, Kubernetes Pod X Memory Total Cache Container X Memory Usage Container, Kubernetes Node, Kubernetes Pod, System X X X X Memory Working Set Container, Kubernetes Node, Kubernetes Pod X Network Connections System X Network Errors Kubernetes Node, Kubernetes Pod, System X X Network IO Kubernetes Node, Kubernetes Pod, System X X Network IO Bytes Sent Container X X Network IO Bytes Received Container X X Network IO Packets System X Network IO Packets Dropped System X Network IO Packets Dropped (Incoming) Container X Network IO Packets Dropped (Outgoing) Container X Paging Faults System X Paging Operations System X Paging Usage System X Process CPU Time System X Process Disk IO System X Process Memory Usage System X Process Memory Virtual System X Processes Count System X Processes Created System X Resource Quota Hard Limit Various X Resource Quota Used Various X State Ready Container X State Restarts Container X State Active Jobs Cron Job X State Current Scheduled Nodes Daemonset X State Desired Scheduled Nodes Daemonset X State Misscheduled Modes Daemonset X State Ready Nodes Daemonset X State Available Deployment X State Desired Deployment X State Current Replicas HPA X State Desired Replicas HPA X State Max Replicas HPA X State Min Replicas HPA X State Active Pods Job X State Desired Successful Pods Job X State Failed Pods Job X State Max Parallel Jobs Job X State Successful Pods Job X State Phase Namespace X State Phase Pod X State Available Replicaset X State Desired Replicaset X State Available Replication Controller X State Desired Replication Controller X State Current Pods Stateful Set X State Desired Pods Stateful Set X State Ready Pods Stateful Set X State Updated Pods Stateful Set X Storage Available Volume X Storage Capacity Volume X Storage Limit Container X Storage (Ephemeral) Limit Container X Storage Requests Container X Storage (Ephemeral) Request Container X"},{"location":"app-interoperability/observability/#logs","title":"Logs","text":"<p>The Kubernetes Events receiver collects the event logs when using the default configuration. The Kubernetes Object Receiver must be configured to collect the desired logs. Container logs must be emitted using OTLP.</p>"},{"location":"app-interoperability/observability/#kubernetes-attributes-processor","title":"Kubernetes Attributes Processor","text":"<p>The following shows the attributes added to each signal when using the Kubernetes Attribute Processors' default configuration.</p> <ul> <li>k8s.namespace.name</li> <li>k8s.pod.name</li> <li>k8s.pod.uid</li> <li>k8s.pod.start_time</li> <li>k8s.deployment.name</li> <li>k8s.node.name</li> </ul>"},{"location":"app-interoperability/workload-orch-to-app-reg-interaction/","title":"Application Registry","text":"<p>This section describes the Application Registry and the exchange of an application package from an Application Developer to the Workload Orchestration Vendor. </p> <p>The Application Developer SHALL use a Git repository to share an application package. This Git repository is considered the Application Registry. </p> <p>The connectivity between the Workload Orchestration Software and the Application Registry SHALL be read-only. </p> <p>Upon installation request from the End User, the Workload Orchestration Vendor SHALL retrieve the application package using a <code>git pull</code> request from the Application Registry. </p> <p>The Workload Orchestration Vendor reads in the application description file, <code>margo.yaml</code>, and presents a user interface that allows the specification of parameters available according to <code>margo.yaml</code>. </p> <p>The End User then specifies the configuration parameters for the application package. </p> <p>Then, the application package is ready to be passed on to the installation process.  </p> <p>Note  The specifics of the installation process are still under discussion: this could be for example a GitOps based approach. </p> <p>During this process the containers referenced in the application manifest (Helm Chart or Docker Compose) are retrieved from container/Helm registries. </p> <p>At a minimum, a Margo-compliant WOS SHALL provide a way for an end user to manually setup a connection between the WOS and an application registry. This is required so as not to prohibit an end user for being able to install any Margo-compliant application they wish; including applications developed by the end user. </p> <p>The Workload Orchestration Vendor MAY provide enhanced user experience options such as the pre-configuring of application registries to monitor. These can include application registries from third-party application vendors or their own applications. </p>"},{"location":"app-interoperability/workload-orch-to-app-reg-interaction/#secure-access-to-the-application-package","title":"Secure Access to the Application Package","text":"<p>It is expected the connection between the Workload Orchestration software and the Application developer\u2019s application registry is secured using standard secure connectivity best practices. Some standard practices include the following: </p> <ul> <li>Basic authentication via HTTPS </li> <li>Bearer token authentication </li> <li>TLS certifications </li> </ul>"},{"location":"device-interoperability/device-requirements/","title":"Margo Edge Compute Device Details","text":"<p>Within Margo, devices are represented by compute hardware that runs within the customers environment to host Margo Compliant Applications. Margo Devices are defined by the roles they can facilitate within the Margo Architecture. An Edge Compute within Margo is initially referenced as a \"Device\" which represents the initial lifecycle stage. Once the device is onboarded within the Workload Orchestration Software, it assumes a role based on capabilities.  Supported Device roles are shown below:</p> <ul> <li>Standalone Cluster</li> <li>Cluster Leader</li> <li>Cluster Worker</li> <li>Standalone Device</li> <li>Micro Device </li> </ul>"},{"location":"device-interoperability/device-requirements/#base-requirements-for-all-devices","title":"Base Requirements for All Devices","text":"<ul> <li>TPM support</li> <li>Secure Boot</li> <li>Attestation</li> <li>Zero Trust Network Access (ZTNA)</li> </ul>"},{"location":"device-interoperability/device-requirements/#cluster-leader-role-details","title":"Cluster Leader Role Details","text":"<p>The Cluster Leader Role within Margo describes devices that have the ability to manage the cluster of one or more worker nodes that are subscribed to this leader (itself included if applicable).  </p> <p>Cluster Leader Functional Requirements:</p> <ul> <li>Enable control node functionality for in Kubernetes cluster </li> <li>Support minimum set of Kubernetes control node API for a cluster leader </li> <li>Support the \"Workload Orchestration Agent\" Interface for a Cluster leader <ol> <li>Ability to authenticate to a repo </li> </ol> </li> <li>Support the telemetry API for a cluster leader </li> <li>Support the \"Policy Agent\" API for a cluster leader </li> <li>Support the \"Device Orchestration Agent\" API - out of scope for MVS1 </li> </ul>"},{"location":"device-interoperability/device-requirements/#cluster-worker-role-details","title":"Cluster Worker Role Details","text":"<p>The Cluster Worker Role within Margo describes devices that have a limited amount of compute capacity that can still run Margo Compliant Applications. This Role is orchestrated via the Cluster Leader.</p> <p>Cluster Worker Functional Requirements:</p> <ul> <li>Enable Worker Node functionality within a Kubernetes Cluster</li> <li>Host the following additional components:<ul> <li>OCI Container Runtime </li> <li>OTEL Collector </li> <li>Policy Agent</li> <li>Host Device Orchestration Agent <ul> <li>Note: Out of scope for MVS1</li> </ul> </li> </ul> </li> </ul>"},{"location":"device-interoperability/device-requirements/#standalone-cluster-role-details","title":"Standalone Cluster Role Details","text":"<p>The Standalone Cluster Role within Margo describes devices that have additional compute capacity to enable a wide range of functions within the ecosystem. </p> <p>Standalone Cluster functional requirements:</p> <ul> <li>Enables both Cluster Leader and Worker roles concurrently in a single device<ol> <li>See Cluster Leader Role and Cluster Worker Role for specifict requirements</li> </ol> </li> <li>The Standalone Cluster role has the ability to transition into either the Cluster Leader or Cluster Worker at a later stage in deployment. </li> </ul>"},{"location":"device-interoperability/device-requirements/#standalone-device-role-details","title":"Standalone Device Role Details","text":"<p>The Standalone Device role represents a device that can host Margo Compliant Applications. This device role is not intended to be utilized within a Kubernetes edge environment. </p> <p>Standalone Device functional requirements:</p> <ul> <li>Host Margo Workload Orchestration Agent<ul> <li>This enables the device with the functionality outlined within the Workload Orchestration Agent section of the specification</li> </ul> </li> <li>Host the following additional components:<ul> <li>OCI Container Runtime </li> <li>OTEL Collector </li> <li>Policy Agent</li> <li>Host Device Orchestration Agent <ul> <li>Note: Out of scope for MVS1</li> </ul> </li> </ul> </li> </ul>"},{"location":"margo-api-reference/margo-api-specification/","title":"Margo Management API Specification","text":"<p>The Margo Management API is used to enable communication between Margo compliant devices and orchestration solutions.</p> <p>Links below provide further detail regarding the API definition:</p> <ul> <li>Desired State</li> <li>Deployment Status</li> <li>Device Capabilities</li> <li>RootCA Download</li> </ul>"},{"location":"margo-api-reference/margo-api-specification/#management-interface-authorization-and-security-details","title":"Management Interface Authorization and Security Details","text":""},{"location":"margo-api-reference/margo-api-specification/#authorization-header","title":"Authorization Header","text":"<p>For requests requiring authentication a bearer token MUST be present in the message's <code>Authorization</code> header.</p> <p>You can get the access token by sending a request to the workload orchestration web service's token URL, providing the device's client Id and secret.</p> <pre><code>curl -X POST \\\n-H \"Content-Type: application/x-www-form-urlencoded\" \\\n-d \"grant_type=client_credentials&amp;client_id=&lt;CLIENT_ID&gt;&amp;client_secret=&lt;CLIENT_SECRET&gt;\" \\\n&lt;WOS_Token_URL&gt;\n</code></pre> <p>The request's response indicates the access token to use for subsequent requests.</p> <pre><code>{\n  \"access_token\": \"ACCESS_TOKEN\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 3600\n}\n</code></pre> <p>Set the <code>Authorization</code> headers value to <code>Bearer &lt;ACCESS_TOKEN&gt;</code> When making request requiring authorization. For example:</p> <pre><code>curl -H \"Authorization: Bearer ACCESS_TOKEN\" https://wos.example.com/device/2fc3d8e9-8c56-4270-b7d3-8ed30262e5e1\n</code></pre>"},{"location":"margo-api-reference/margo-api-specification/#signing-payloads","title":"Signing Payloads","text":"<p>The following steps are used to sign a payload</p> <ol> <li>Generate a SHA-256 hash value for the request's body</li> <li>Create a digital signature by using the message source certificates's private key to encrypt the the hash value</li> <li>Base-64 encode the certificate's public key and the digital signature in the format of <code>&lt;public key&gt;;&lt;digital signature&gt;</code></li> <li>Include the base-64 encoded string in the request's <code>X-Payload-Signature</code> header</li> </ol>"},{"location":"margo-api-reference/margo-api-specification/#verifying-signed-payloads","title":"Verifying Signed Payloads","text":"<p>The following steps are used to verify signed payloads</p> <ol> <li>Retrieve the public key from the <code>X-Payload-Signature</code> header</li> <li>Decrypt the digital signature using the public key to get the original hash value</li> <li>Generate a SHA-256 hash value for the requests's body</li> <li>Ensure the generated hash value matches the hash value from the message</li> </ol>"},{"location":"margo-api-reference/workload-api/desired-state-api/desired-state/","title":"Desired State","text":"<p>Action: This is incomplete and doesn't contain the details for the deploymentProfile or parameters</p> <p>Action: We are currently investigating the best way to interface with source control infrastructure.</p> <p>The desired state is expressed as a Kubernetes custom resource definition and made available to the device's management client as a YAML document using the OpenGitOps pattern.</p>"},{"location":"margo-api-reference/workload-api/desired-state-api/desired-state/#applicationdeployment-definition","title":"ApplicationDeployment Definition","text":"<pre><code>apiVersion: application.margo.org/v1alpha1\nkind: ApplicationDeployment\nmetadata:\n  annotations:\n    id: \n    applicationId: \n  name: \n  namespace: \nspec:\n    deploymentProfile:\n        type: \n        components:\n            - name: \n              properties:\n    parameters:\n        param:\n            value: \n            targets:\n                - pointer: \n                  components:[]\n</code></pre> Attribute Type Required? Description apiVersion string Y Identifier of the version of the API the object definition follows. kind string Y Must be <code>ApplicationDeployment</code>. metadata Metadata Y Metadata element specifying characteristics about the application deployment. See the Metadata Attributes section below. spec Spec Y Spec element that defines deployment profile and parameters associated with the application deployment. See the Spec Attributes section below."},{"location":"margo-api-reference/workload-api/desired-state-api/desired-state/#metadata-attributes","title":"Metadata Attributes","text":"Attribute Type Required? Description annotations Annotations Y Defines the application ID and unique identifier associated to the deployment specification. Needs to be assigned by the Workload Orchestration Software. See the Annotation Attributes section below. name string Y When deploying to Kubernetes, the manifests name. The name is chosen by the workload orchestration vendor and is not displayed anywhere. namespace string Y When deploying to Kubernetes, the namespace the manifest is added under. The namespace is chosen by the workload orchestration solution vendor."},{"location":"margo-api-reference/workload-api/desired-state-api/desired-state/#annotation-attributes","title":"Annotation Attributes","text":"Attribute Type Required? Description applicationId string Y An identifier for the application. The id is used to help create unique identifiers where required, such as namespaces. The id must be lower case letters and numbers and MAY contain dashes. Uppercase letters, underscores and periods MUST NOT be used. The id MUST NOT be more than 200 characters. The applicationId MUST match the associated application package Metadata \"id\" attribute. id string Y The unique identifier UUID of the deployment specification. Needs to be assigned by the Workload Orchestration Software."},{"location":"margo-api-reference/workload-api/desired-state-api/desired-state/#spec-attributes","title":"Spec Attributes","text":"Attribute Type Required? Description deploymentProfile Deployment Profile Y Section that defines deployment details including type and components. parameters map[string][Parameter] Y Describes the configured parameters applied via the end-user."},{"location":"margo-api-reference/workload-api/desired-state-api/desired-state/#example-cluster-enabled-application-deployment-specification","title":"Example: Cluster Enabled Application Deployment Specification","text":"<pre><code>apiVersion: application.margo.org/v1alpha1\nkind: ApplicationDeployment\nmetadata:\n    annotations:\n        applicationId: com-northstartida-digitron-orchestrator\n        id: a3e2f5dc-912e-494f-8395-52cf3769bc06\n    name: com-northstartida-digitron-orchestrator-deployment\n    namespace: margo-poc\nspec:\n    deploymentProfile:\n        type: helm.v3\n        components:\n            - name: database-services\n              properties:\n                repository: oci://quay.io/charts/realtime-database-services\n                revision: 2.3.7\n                timeout: 8m30s\n                wait: \"true\"\n            - name: digitron-orchestrator\n              properties:\n                repository: oci://northstarida.azurecr.io/charts/northstarida-digitron-orchestrator\n                revision: 1.0.9\n                wait: \"true\"\n    parameters:\n        adminName:\n            value: Some One\n            targets:\n                - pointer: administrator.name\n                  components:\n                    - digitron-orchestrator\n        adminPrincipalName:\n            value: someone@somewhere.com\n            targets:\n                - pointer: administrator.userPrincipalName\n                  components:\n                    - digitron-orchestrator\n        cpuLimit:\n            value: \"4\"\n            targets:\n                - pointer: settings.limits.cpu\n                  components:\n                    - digitron-orchestrator\n        idpClientId:\n            value: 123-ABC\n            targets:\n                - pointer: idp.clientId\n                  components:\n                    - digitron-orchestrator\n        idpName:\n            value: Azure AD\n            targets:\n                - pointer: idp.name\n                  components:\n                    - digitron-orchestrator\n        idpProvider:\n            value: aad\n            targets:\n                - pointer: idp.provider\n                  components:\n                    - digitron-orchestrator\n        idpUrl:\n            value: https://123-abc.com\n            targets:\n                - pointer: idp.providerUrl\n                  components:\n                    - digitron-orchestrator\n                - pointer: idp.providerMetadata\n                  components:\n                    - digitron-orchestrator\n        memoryLimit:\n            value: \"16384\"\n            targets:\n                - pointer: settings.limits.memory\n                  components:\n                    - digitron-orchestrator\n        pollFrequency:\n            value: \"120\"\n            targets:\n                - pointer: settings.pollFrequency\n                  components:\n                    - digitron-orchestrator\n                    - database-services\n        siteId:\n            value: SID-123-ABC\n            targets:\n                - pointer: settings.siteId\n                  components:\n                    - digitron-orchestrator\n                    - database-services\n</code></pre>"},{"location":"margo-api-reference/workload-api/desired-state-api/desired-state/#example-standalone-device-application-deployment-specification","title":"Example: Standalone Device Application Deployment Specification:","text":"<pre><code>apiVersion: application.margo.org/v1alpha1\nkind: ApplicationDeployment\nmetadata:\n    annotations:\n        applicationId: com-northstartida-digitron-orchestrator\n        id: ad9b614e-8912-45f4-a523-372358765def\n    name: com-northstartida-digitron-orchestrator-deployment\n    namespace: margo-poc\nspec:\n    deploymentProfile:\n        type: docker-compose\n        components:\n            - name: digitron-orchestrator-docker\n              properties:\n                keyLocation: https://northsitarida.com/digitron/docker/public-key.asc\n                packageLocation: https://northsitarida.com/digitron/docker/digitron-orchestrator.tar.gz\n    parameters:\n        adminName:\n            value: Some One\n            targets:\n                - pointer: ENV.ADMIN_NAME\n                  components:\n                    - digitron-orchestrator-docker\n        adminPrincipalName:\n            value: someone@somewhere.com\n            targets:\n                - pointer: ENV.ADMIN_PRINCIPALNAME\n                  components:\n                    - digitron-orchestrator-docker\n        idpClientId:\n            value: 123-ABC\n            targets:\n                - pointer: ENV.IDP_CLIENT_ID\n                  components:\n                    - digitron-orchestrator-docker\n        idpName:\n            value: Azure AD\n            targets:\n                - pointer: ENV.IDP_NAME\n                  components:\n                    - digitron-orchestrator-docker\n        idpProvider:\n            value: aad\n            targets:\n                - pointer: ENV.IDP_PROVIDER\n                  components:\n                    - digitron-orchestrator-docker\n        idpUrl:\n            value: https://123-abc.com\n            targets:\n                - pointer: ENV.IDP_URL\n                  components:\n                    - digitron-orchestrator-docker\n        pollFrequency:\n            value: \"120\"\n            targets:\n                - pointer: ENV.POLL_FREQUENCY\n                  components:\n                    - digitron-orchestrator-docker\n        siteId:\n            value: SID-123-ABC\n            targets:\n                - pointer: ENV.SITE_ID\n                  components:\n                    - digitron-orchestrator-docker\n</code></pre>"},{"location":"margo-api-reference/workload-api/device-api/deployment-status/","title":"Deployment Status","text":"<p>While applying a new desired state the device's management client MUST provide the workload orchestration web service with an indication of the current status. This is done calling the Device API's <code>device status</code> endpoint.</p>"},{"location":"margo-api-reference/workload-api/device-api/deployment-status/#route-and-http-methods","title":"Route and HTTP Methods","text":"<pre><code>POST /device/{deviceId}/deployment/{deploymentId}/status\n</code></pre>"},{"location":"margo-api-reference/workload-api/device-api/deployment-status/#route-parameters","title":"Route Parameters","text":"Parameter Type Required? Description {deviceId} string Y The device's Id registered with the workload orchestration solution during onboarding. {deploymentId} string Y The deployment Id the status is being reported for"},{"location":"margo-api-reference/workload-api/device-api/deployment-status/#request-body-fields","title":"Request Body Fields","text":"<p>Action: Need to figure out the options for error code and message. Are these to be free form?</p> Fields Type Required? Description apiVersion string Y Identifier of the version of the API the object definition follows. kind string Y Must be <code>DeploymentStatus</code>. deploymentId string Y The unique identifier UUID of the deployment specification. Needs to be assigned by the Workload Orchestration Software. status []status Y Element that defines overall deployment status. See the Status Fields section below. components []components Y Element that defines the individual component's deployment status. See the Component Fields section below."},{"location":"margo-api-reference/workload-api/device-api/deployment-status/#status-fields","title":"Status Fields","text":"Fields Type Required? Description state string Y Current state of the overall deployment. The state value MUST be one the following options: Pending, Installing, Installed, Failed. The overall deployment status MUST inherit the current component's status until it has gone through installing each component. error Error N Element that defines the overall installation error if one occured. See the Error Fields section below."},{"location":"margo-api-reference/workload-api/device-api/deployment-status/#component-fields","title":"Component Fields","text":"Attribute Type Required? Description name string Y Name of the deployment component, inherited via the deployment specification state string Y The component's current deployment state of the component. MUST be one of the following options: Pending, Installing, Installed, Failed error Error N Element that defines the components installation error if one occured. See the Error Fields section below."},{"location":"margo-api-reference/workload-api/device-api/deployment-status/#error-fields","title":"Error Fields","text":"Fields Type Required? Description code string Y Associated error code following a component failure during installation. message string Y Associated error message that provides further details to the WOS about the error that was encountered."},{"location":"margo-api-reference/workload-api/device-api/deployment-status/#example-request","title":"Example Request","text":"<pre><code>{\n    \"apiVersion\": \"deployment.margo/v1\",\n    \"kind\": \"DeploymentStatus\",\n    \"deploymentId\": \"a3e2f5dc-912e-494f-8395-52cf3769bc06\",\n    \"status\": {\n        \"state\": \"pending\",\n        \"error\": {\n            \"code\": \"\",\n            \"message\": \"\"\n        }\n    },\n    \"components\": [\n        {\n            \"name\": \"digitron-orchestrator\",\n            \"state\": \"pending\",\n            \"error\": {\n                \"code\":\"\",\n                \"message\":\"\"\n            }\n        },\n        {\n            \"name\": \"database-services\",\n            \"state\": \"pending\",\n            \"error\": {\n                \"code\": \"\",\n                \"message \": \"\"\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"margo-api-reference/workload-api/device-api/deployment-status/#response-code","title":"Response Code","text":"Code Description 201 The deployment status was added, or updated, successfully 4XX-5XX The requests was not completed sucessfully"},{"location":"margo-api-reference/workload-api/device-api/device-capabilities/","title":"Device Capabilities","text":"<p>Devices MUST provide the workload orchestration service with its capabilities and characteristics. This is done by calling the Device API's <code>device capabilities</code> endpoint.</p>"},{"location":"margo-api-reference/workload-api/device-api/device-capabilities/#route-and-http-methods","title":"Route and HTTP Methods","text":"<pre><code>POST /device/{deviceId}/capabilities\nPUT /device/{deviceId}/capabilities\n</code></pre>"},{"location":"margo-api-reference/workload-api/device-api/device-capabilities/#route-parameters","title":"Route Parameters","text":"Parameter Type Required? Description {deviceId} string Y The device's Id registered with the workload orchestration web service during onboarding."},{"location":"margo-api-reference/workload-api/device-api/device-capabilities/#request-body-fields","title":"Request Body Fields","text":"<p>Action: Discusssion still needed on \"types\" and \"properties\" per type that would be required. This is relevant for both the peripherals and interfaces section.</p> Field Type Required? Description apiVersion string Y Identifier of the version of the API the object definition follows. kind string Y Must be <code>DeviceCapabilities</code>. properties Properties Y Element that defines characteristics about the device. See the Properties Fields section below."},{"location":"margo-api-reference/workload-api/device-api/device-capabilities/#properties-fields","title":"Properties Fields","text":"Field Type Required? Description id string Y Unique deviceID assigned to the device via the Device Owner. vendor string Y Defines the device vendor. modelNumber string Y Defines the model number of the device. serialNumber string Y Defines the serial number of the device. roles []string Y Element that defines the device role it can provide to the Margo environment. MUST be one of the following: Standalone Cluster, Cluster Leader, or Standalone Device resources []Resource Y Element that defines the device's resources available to the application deployed on the device. See the Resource Fields section below. peripherals []Peripheral Y Element that defines the device's peripherals available to the application deployed on the device. See the Peripheral Fields section below. interfaces []Interface Y Element that defines the device's interfaces that are available to the application deployed on the device. See the Interface Fields section below."},{"location":"margo-api-reference/workload-api/device-api/device-capabilities/#resources-fields","title":"Resources Fields","text":"Fields Type Required? Description cpus []CPU Y Element that defines the device's CPUs that are available to the application deployed on the device. See the CPU Fields section below. memory integer Y Defines the memory capacity available for applciations on the device. This MUST be defined in GBs storage integer Y Defines the storage capacity available for applications to utilize. This MUST be defined in GBs."},{"location":"margo-api-reference/workload-api/device-api/device-capabilities/#cpu-fields","title":"CPU Fields","text":"Fields Type Required? Description cpuArchitecture string Y Defines the CPUs architecture. i.e. ARM/Intel x86. cores integer Y Defines the cores available within the hosts CPU. frequency integer Y Defines the frequency of the CPU. Must be defined in Ghz."},{"location":"margo-api-reference/workload-api/device-api/device-capabilities/#peripheral-fields","title":"Peripheral Fields","text":"Fields Type Required? Description name string Y Name of the peripheral. type string Y Type of the peripheral. i.e. GPU modelNumber string Y Model number of the peripheral. properties map[string]string Y Properties of the peripheral."},{"location":"margo-api-reference/workload-api/device-api/device-capabilities/#interface-fields","title":"Interface Fields","text":"Fields Type Required? Description name string Y Name of the interface. type string Y Type of the interface. i.e. Ethernet NIC, modelNumber string Y Model number of the interface. properties map[string]string Y Properties of the interface to inform the WOS with additional information."},{"location":"margo-api-reference/workload-api/device-api/device-capabilities/#example-request","title":"Example Request","text":"<pre><code>{\n    \"apiVersion\": \"device.margo/v1\",\n    \"kind\": \"DeviceCapability\",\n    \"properties\": {\n        \"id\": \"northstarida.xtapro.k8s.edge\",\n        \"vendor\": \"Northstar Industrial Applications\",\n        \"modelNumber\": \"332ANZE1-N1\",\n        \"serialNumber\": \"PF45343-AA\",\n        \"roles\": [\"standalone cluster\", \"cluster lead\"],\n        \"resources\": {\n            \"memory\": \"64.0 GB\",\n            \"storage\": \"2000 GB\",\n            \"cpus\": [{\n                \"architecture\": \"Intel x64\",\n                \"cores\": 24,\n                \"frequency\": \"6.2 GHz\"\n            }]\n        },\n        \"peripherals\": [{\n            \"name\": \"NVIDIA GeForce RTX 4070 Ti SUPER OC Edition Graphics Card\",\n            \"type\": \"GPU\",  \n            \"modelNumber\": \"TUF-RTX4070TIS-O16G\",\n            \"properties\": {\n                \"manufacturer\": \"NVIDIA\",\n                \"series\": \"NVIDIA GeForce RTX 40 Series\",\n                \"gpu\": \"GeForce RTX 4070 Ti SUPER\",\n                \"ram\": \"16 GB\",\n                \"clockSpeed\": \"2640 MHz\"\n            }\n        }],\n        \"interfaces\": [\n            {\n                \"name\": \"RTL8125 NIC 2.5G Gigabit LAN Network Card\",\n                \"type\": \"Ethernet\",\n                \"modelNumber\": \"RTL8125\",\n                \"properties\": {\n                    \"maxSpeed\": \"2.5 Gbps\"\n                }\n            },\n            {\n                \"name\": \"WiFi 6E Intel AX411NGW M.2 Cnvio2\",\n                \"type\":  \"Wi-Fi\",\n                \"modelNumber\": \"AX411NGW\",\n                \"properties\": {\n                    \"bands\": [\"2.4 GHz\", \"5 GHz\", \"6GHz\"],\n                    \"maxSpeed\": \"2.4 Gbps\"\n                }\n            }]\n    }\n}\n</code></pre>"},{"location":"margo-api-reference/workload-api/device-api/device-capabilities/#response-code","title":"Response Code","text":"Code Description 201 The device capabilities document was added, or updated, successfully 4XX-5XX The requests was not completed sucessfully"},{"location":"margo-api-reference/workload-api/onboarding-api/device-onboarding/","title":"Device Onboarding","text":"<p>Action: This API needs to be defined</p>"},{"location":"margo-api-reference/workload-api/onboarding-api/device-onboarding/#route-and-http-methods","title":"Route and HTTP Methods","text":"<pre><code>POST /onboarding/\n</code></pre>"},{"location":"margo-api-reference/workload-api/onboarding-api/device-onboarding/#request-body","title":"Request Body","text":"<p>TBD</p>"},{"location":"margo-api-reference/workload-api/onboarding-api/device-onboarding/#response-body","title":"Response Body","text":"<p>TBD</p>"},{"location":"margo-api-reference/workload-api/onboarding-api/rootca-download/","title":"Certificate API","text":"<p>In order to facilitate secure communication between the device's management client and workload orchestration web service the workload orchestration web service's root CA certificate must be downloaded using the Onboarding API's <code>certificate</code> endpoint.</p>"},{"location":"margo-api-reference/workload-api/onboarding-api/rootca-download/#route-and-http-methods","title":"Route and HTTP Methods","text":"<pre><code>GET /onboarding/certificate\n</code></pre>"},{"location":"margo-api-reference/workload-api/onboarding-api/rootca-download/#response-body","title":"Response Body","text":"<pre><code>{\n    \"certificate\":\"&lt;base-64 encoded certificate text&gt;\"\n}\n</code></pre>"},{"location":"margo-overview/introduction-system-design/","title":"Envisioned System Design","text":"<p>The Margo Initiative intends to create an open interoperability standard &amp; ecosystem for the industrial edge, allowing edge devices, apps, and orchestration software to be compatible &amp; interoperable across manufacturers and software developers willing to adopt such standard. </p> <p>System Design Drawing</p> <p></p>"},{"location":"margo-overview/personas/","title":"Personas","text":"<p>End User</p> <p>Within the industrial automation market interactions are business to business operations. Meaning, end user means the business organization within the transaction. Any user within a company that has access to the Margo compliant application or devices. </p> <p>Application Developer </p> <p>Application developer persona represents an entity that utilizes the Margo standard to construct their application. By utilizing the Margo standard, the developer can focus on differentiation while inheriting the advantages of the Margo ecosystem.  </p> <p>Application Marketplace Provider</p> <p>This Marketplace provider is a transactional software that is provided to End Users to browse available applications and gain access via purchasing the software.  </p> <p>Note: Application Marketplaces are out of scope for Project Margo. However, Margo provides guidelines around content required within the Application Package that is utilized by Marketplaces.  </p> <p>Workload Orchestration Vendor </p> <p>The Workload Orchestration Vendor provides End Users with the infrastructure to manage applications along with Kubernetes Node and Node Cluster enrollment and management.   </p> <p>Device Owner The Device Owner within Project Margo is responsible for meeting the requirements outlined within the device requirements section.</p> <p>Device Requirements</p> <p>Device Manufacturer</p> <p>The Device Manufacturer within Project Margo is responsible for providing hardware that complies with the Project Margo device requirements that enable End Users within the Margo ecosystem. The Device Manufacturer is responsible for managing the device's lifecycle for the End-User. An additional option is for the Manufacturer to contract a Device Integrator to manage the lifecycle for the End-User. </p> <p>Device Integrator</p> <p>The Device Integrator within Project Margo is responsible for transforming a generic device into a Project Margo device. Once the device is Margo compliant, the Device Integrator is responsible for managing the device's lifecycle for the End-User.</p> <p>Device Orchestration Vendor</p> <p>The Device Orchestration Vendor provides End Users with the service to manage their Edge Devices lifecycle within the Margo ecosystem.  </p>"},{"location":"margo-overview/technical-lexicon/","title":"Technical Lexicon","text":"<p>Application</p> <p>An Edge Application is a piece of software tailored to run within a customer's environment on a Edge Compute Device. The Edge Application consists of an application manifest, application description file, along with one or more containers, where the containers can be deployed on one or more nodes. </p> <p>Edge Compute Device </p> <p>Edge Compute Devices are represented by compute hardware that runs within the customer's environment to host Margo Compliant Applications. Margo Compute Devices are defined by the roles they can facilitate within the Margo Architecture. An Edge Compute within Project Margo is initially referenced as a \"Device\" which represents the initial lifecycle stage. Once the device is onboarded within the Workload Orchestration Software, it assumes a role based on capabilities.  Supported Device roles are shown below:</p> <ul> <li>Standalone Cluster(Leader and/or Worker)</li> <li>Cluster Worker</li> <li>Standalone Device</li> </ul> <p>Workload Orchestration Software </p> <p>Workload Orchestration Software (WOS) is the service that enables End Users to configure, deploy, and manage edge applications. Interfaces with Margo compliant App and Device registry and repositories. Complies with all Margo Functional/Non-Functional requirements for workload management. Interfaces with Margo compliant Edge device/nodes. </p> <p>Workload Orchestration Agent </p> <p>The Workload Orchestration Agent is a service that runs on the Edge Compute Device which communicates with the Workload Orchestration Software to receive workloads and configurations to be applied on the Edge Compute Device.</p> <p>Device Orchestration Software </p> <p>Device Orchestration Software provides Margo with a central location to onboard, delete, and maintain Edge Compute Devices within the ecosystem. This software is utilized in conjunction with the Workload Orchestration software to provide users with the features required to manage their edge device along with workloads running on them.  </p> <p>Device Orchestration Agent </p> <p>The Device Orchestration Agent is a service that runs on the Edge Compute Device which communicates with the Device Orchestration Software to receive device configuration to be applied on the Edge Compute Device.</p> <p>Application Registry </p> <p>Curated access-controlled storage location where Application manifests and associated marketplace data are hosted via the Application Developer.  </p> <p>Application Repository </p> <p>Orchestration Software typically sources Apps from Application repositories when deploying and maintaining apps on Edge Compute Devices. </p> <p>Application Marketplace </p> <p>Application Marketplace is the location where end users purchase the rights to access applications from a vendor.  </p> <p>Functional Requirements of the Application Marketplace: </p> <ul> <li>Provide users with a list of applications available for purchase </li> <li>Enable users to purchase the rights to an application </li> <li>Enable users with the meta data to access associated Application Registries/Repositories</li> </ul> <p>Note The Application Marketplace component is out of scope for Project Margo. However, it is necessary to define to clarify the full user workflow.   </p> <p>Application Catalog </p> <p>List of Applications within the Workload Orchestration Software that the end user has access to deploy and manage.  </p>"},{"location":"orchestration/workload/device-capability-reporting/","title":"Device Capability","text":"<p>The purpose of device capabilities reporting is to ensure the workload orchestration solution has the information needed to pair workloads with compatible edge devices. The device's capabilities are reported to the workload orchestration web service using Margo management API.</p>"},{"location":"orchestration/workload/device-capability-reporting/#device-capability-reporting","title":"Device Capability Reporting","text":"<p>The device owner MUST report their device's capabilities and characteristics via the Device API when onboarding the device with the workload orchestration solution and whenever any workload related hardware changes occur.</p> <p>Action: The device capabilities details are still being discussed</p> <p>The following information MUST be provided:</p> <ul> <li>Device Id</li> <li>Device Vendor</li> <li>Model Number</li> <li>Serial Number</li> <li>Margo Device Role Designation(Cluster Leader/Worker / Standalone Device)</li> <li>Resources available for workloads to utilize on the Device:</li> <li>Memory Capacity<ul> <li>Storage Capacity</li> </ul> </li> <li>CPU information</li> <li>Device peripherals(i.e. Graphics card)</li> <li>Network interfaces(wifi/eth/cellular)</li> </ul> <p>For more information see the device capabilties API.</p>"},{"location":"orchestration/workload/workload-deployment/","title":"Desired State Storage and Retrieval","text":"<p>Margo uses an OpenGitOps approach for managing the edge device's desired state. The workload orchestration solution vendor maintains Git repositories, under their control, to push updates to the desired state for each device being managed. The device's management client is responsible for monitoring the device's assigned Git repository for any changes to the desired state that MUST be applied.</p> <p>Action: The use of GitOps patterns for pulling desired state is still being discussed/investigated. </p>"},{"location":"orchestration/workload/workload-deployment/#desired-state-requirements","title":"Desired State Requirements:","text":"<p>Note: Need to investigate best way to construct the Git Repository. Folder structure / Multiple applications per Edge Device/Cluster Note: this is the recommendation from FluxCD https://fluxcd.io/flux/guides/repository-structure/</p> <ul> <li>The workload orchestration solution MUST store the device's desired state documents within a Git repository the device's management client can access.  <p>Note: Git repository storage was selected to ensure secure storage and traceability pertaining to the workload's desire state(s).  </p> </li> <li>The device's management client MUST monitor the device's Git repository for updates to the desired state using the URL and access token provided by the workload orchestration solution during onboarding.</li> </ul>"},{"location":"orchestration/workload/workload-deployment/#workload-management-sequence-of-operations","title":"Workload Management Sequence of Operations","text":""},{"location":"orchestration/workload/workload-deployment/#desired-state-lifecycle","title":"Desired State lifecycle:","text":"<ol> <li>The workload orchestration solution creates the desired state documents based on the end user's inputs when installing, updating or deleting an application.</li> <li>The workload orchestration solution pushes updates to the device's Git repository reflecting the changes to the desired state.</li> <li>The device's management client monitors its assigned Git repository for changes.</li> <li>When the device's management client notices a difference between the current (running) state and the desired state, it MUST pull down and attempt to apply the new desired state.</li> </ol>"},{"location":"orchestration/workload/workload-deployment/#applying-the-desired-state","title":"Applying the Desired State:","text":"<ol> <li>The device attempts to apply the desired state to become new current state</li> <li>While the new desired state is being applied, the device's management client MUST report progress on state changes (see the deployment state section below) using the Device API</li> </ol>"},{"location":"orchestration/workload/workload-deployment/#deployment-status","title":"Deployment Status","text":"<p>The deployment status is sent to the workload orchestration web service using the Device API when there is a change in the deployment state. This informs the workload orchestration web service of the current state as the new desired state is applied. </p> <p>The deployment status uses the following rules:</p> <ul> <li>The state is <code>Pending</code> once the device management client has received the updated desired state but has not started applying it. When reporting this state indicate the reason.<ul> <li>Such as waiting on Policy agent</li> <li>Waiting on other applications in the 'Order of operations' to be completed.</li> </ul> </li> <li>The state is <code>Installing</code> once the device management client has started the process of applying the desired state.</li> <li>The state is <code>Failure</code> if at any point the desired state fails to be applied. When reporting a <code>Failure</code> state the error message and error code MUST be reported</li> <li>The state is <code>Success</code> once the desired state has been applied completely </li> </ul> <p></p>"},{"location":"orchestration/workload/workload-management-interface-breakdown/","title":"Margo Management API","text":"<p>The Margo management API is a critical component that enables interoperability between devices and workload orchestration solutions. This API MUST be used for communication between all Margo compliant devices and orchestration services. This documentation section focuses on the workload management functions of this management API. The device's management client implementation can either be pre-packaged by the device manufacturer during production or installed by the device integrator later. </p>"},{"location":"orchestration/workload/workload-management-interface-breakdown/#workload-management-api-requirements","title":"Workload Management API Requirements:","text":"<ul> <li>The Margo management API MUST be used for the following core functions<ul> <li>device onboarding with the workload orchestration solution</li> <li>device capabilities reporting</li> <li>identifying desired state changes</li> <li>deployment status reporting</li> </ul> </li> <li>The workload orchestration solution vendors MUST implement a web service following the Margo Management API specification.</li> <li>The device vendor MUST implement a client following the Margo Management API specification.</li> <li>The workload orchestration solution MUST maintain a Git repository to store the devices desired state.</li> <li>The device's management client MUST retrieve the device's desired state from the device's assigned Git repository.</li> <li>Both Web API and GitOps patterns MUST support extended device communication downtime.  <p>Action: The use of GitOps patterns for pulling desired state is still being discussed/investigated. </p> </li> <li>The device's management client MUST reference industry security protocols and port assignments.</li> <li>Running the device's management client as containerized services is preferred to enable easier lifecycle management but not required.</li> <li>The device's management client MUST allow and end user to configure the following options.<ul> <li>Downtime configuration - ensures the device's management client is not retrying communication when operating under a known downtime. Additionally, communication errors MUST be ignored during this configurable period. </li> <li>Polling Interval Period - describes a configurable time period indicating the hours in which the device's management client checks for updates to the device's desired state.</li> <li>Polling Interval Rate - describes the rate for how frequently the device's management client checks for updates to the device's desire state.</li> </ul> </li> </ul> <p></p>"},{"location":"orchestration/workload/workload-orchestration-edge-onboarding/","title":"Device Management Client Onboarding","text":"<p>In order for the workload orchestration solution to manage the edge device's workloads, the device's management client must first complete onboarding.</p> <p>Action: The details in this page are still under discussion and have not been finalized.</p> <p>The onboarding process includes:</p> <ol> <li>The end user provides the the workload orchestration web service's root URL to the device's management client</li> <li>The device's management client downloads the workload orchestration solution vendor's public root CA certificate using the Onboarding API</li> <li>Context and trust is established between the device's management client and the workload orchestration web service</li> <li>The device's management client uses the Onboarding API to onboard with the workload orchestration service.</li> <li>The device's management client receives the client Id, client secret and token endpoint URL used to generate a bearer token.</li> <li>The device's management client receives the URL for the Git repository containing its desired state and an associated access token for authentication</li> <li>The device capabilities information is sent from the device to the workload orchestration web service using the Device API</li> </ol> <p></p> <p>Action: FIDO Device onboarding has not been finalized as the standard onboarding solution. Further discussion/investigations are needed. </p>"},{"location":"orchestration/workload/workload-orchestration-edge-onboarding/#configuring-the-workload-orchestration-web-service-url","title":"Configuring the Workload Orchestration Web Service URL","text":"<p>Action: Ideally this URL is discoverable instead of having to manually enter it but we still need to determine if there is a good way to make this discoverable by using something like the FDO Rendezvous service or multicast DNS. Also, once we determine how the Margo compliant device onboarding and orchestration is going to work it will probably impact this.</p> <p>To ensure the management client is configured to communicate with the correct workload orchestration web service, the device's management client needs to be configured with the expected URL. The device vendor MUST provide a way for the end user to manually set the URL the device's management client uses to communicate with the workload orchestration solution chosen by the end user.</p>"},{"location":"orchestration/workload/workload-orchestration-edge-onboarding/#margo-web-api-authentication-method","title":"Margo Web API Authentication Method","text":"<p>The Margo Web API communication pattern between the device's management client and the workload orchestration web service must use a secure communication channel. In order to facilitate this secure communication Margo requires the use of oAuth 2.0 for authentication.</p>"},{"location":"orchestration/workload/workload-orchestration-edge-onboarding/#api-authorization-strategy","title":"API Authorization Strategy","text":"<ol> <li>During the onboarding process the workload orchestration web service provides the management client with a client Id, client secret and token endpoint URL</li> <li>The management client uses this information to create a bearer token for each request</li> <li>The bearer token is set in the <code>Authorization</code> header for each web request sent to the workload orchestration web service requiring authorization.</li> </ol>"},{"location":"orchestration/workload/workload-orchestration-edge-onboarding/#payload-security-method","title":"Payload Security Method","text":"<p>Action: Certificate Rotation / Unique Identifier for device are still research areas needed.</p> <p>Because of limitations using mTLS with common OT infrastructure such as TLS terminating HTTPS load-balancer or a HTTPS proxy doing lawful inspection Margo has adopted a certificate-based payload signing approach to protect payloads from being tampered with. By utilizing the certificates to create payload envelopes, the device's management client can ensure secure transport between the device's management client and the workload orchestration web service.</p> <ol> <li>During the onboarding process the end user uploads the device's x.509 certificate to the workload orchestration solution </li> <li>The device's management client downloads the root CA certificate using the Onboarding API</li> <li>Once this is complete, both parties are able to secure their payloads. </li> </ol>"},{"location":"orchestration/workload/workload-orchestration-edge-onboarding/#details-pertaining-to-the-message-envelope","title":"Details pertaining to the message Envelope:","text":"<p>Once the edge device has a message prepared for the workload orchestration web service, it completes the following to secure the message.</p> <ol> <li>The device's management client calculates a digest and signature of the payload</li> <li>The device's management client adds an envelope around it that has:<ul> <li>actual payload</li> <li>SHA of the payload, signed by the device certificate</li> <li>Identifier for the certificate that corresponds to the private key used to sign it. <ul> <li>This identifier MUST be the GUID provided by the device manufacturer. Typically the hardware serial number. </li> </ul> </li> </ul> </li> <li>The envelope is sent as the payload to the workload orchestration web service. </li> <li>The workload orchestration web service treats the request's payload as envelope structure, and receives the certificate identifier. <p>Note: This certificate is the device certificate that was manually uploaded to the workload orchestration solution during onboarding. </p> </li> <li>The workload orchestration web service computes digest from the payload, and verifies the signature using the device certification.</li> <li>The payload is then processed by the workload orchestration web service. </li> </ol>"},{"location":"orchestration/workload/workload-orchestration-edge-onboarding/#gitops-service-enrollment","title":"GitOps Service Enrollment","text":"<p>Action: Need to think through a process for retrieving new tokens when one expires. Is time synchronization required in this interface?</p>"},{"location":"orchestration/workload/workload-orchestration-edge-onboarding/#authorization-methods-for-the-desired-state-git-repository","title":"Authorization methods for the Desired State Git Repository","text":"<ul> <li>Git access tokens shall be provided to the device's management client. These access tokens MUST be tied to a dedicated non-user account for access where credentials are frequently rotated and short lived.</li> <li>Need to support accessing rotations of tokens</li> </ul>"}]}